// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int ram;
    static int heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;

        let heap[0] = 0;
        // Memory Maps - heap start - size of a freelist / heap pointer.
        let heap[1] = 16384 - heap - 2;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
        var int blockSize, blockAddr, newBlockSize, nextFreeList;

        let blockAddr = freeList;
        // Find the first free item.
        while (true) {
            let nextFreeList = ram[blockAddr];
            let blockSize = ram[blockAddr + 1];
            if (~(blockSize < (size + 2))) {
                let newBlockSize = blockSize - size - 2;
                let ram[blockAddr + 2 + size] = nextFreeList;
                let ram[blockAddr + 3 + size] = newBlockSize;

                if (freeList = blockAddr) {
                    let freeList = blockAddr + 2 + size;
                }
                let ram[blockAddr + 1] = size;
                return blockAddr + 2;
            } else {
                let blockAddr = nextFreeList;
            }
            if (blockAddr = 0) {
                // Couldn't find space. Halt.
                do Sys.halt();
            }
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array addr) {
        var int freeListPtr, freeBlockAddr;
        var int nextAddr;

        let freeListPtr = freeList;
        let freeBlockAddr = addr - 2;

        // Go through the freelist. Either we hit the one before this, or the end.
        while (true) {
            let nextAddr = ram[freeListPtr];
            if (nextAddr = freeBlockAddr) {
                // Next is the one we're freeing, so make it the next of this, and make current next its next.
                let ram[freeBlockAddr] = ram[freeListPtr];
                let ram[freeListPtr] = freeBlockAddr;
                return;
            }
            if (nextAddr = 0) {
                // We've reached the end of the freelist, so add this to the end.
                let ram[freeListPtr] = freeBlockAddr;
                let ram[freeBlockAddr] = 0;
                return;
            }
            let freeListPtr = nextAddr;
        }

        return;
    }
}
