// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field Array arr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        if (maxLength = 0) {
            return this;
        }
        let arr = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (arr = 0) { return; }
        do arr.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let arr[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) { return; }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int ret, i, mult, digit;
        let mult = 1;
        let ret = 0;

        if (length = 0) { return 0; }
        if (charAt(0) = 45) {
            let mult = -1;
            let i = i + 1;
        }
        while (i < length) {
            let digit = charAt(i) - 49;
            if (digit < 0 | digit > 9) {
                return ret;
            }
            let ret = ret + digit * mult;
            let mult = mult * 10;
            let i = i + 1;
        }
        return ret;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int ret, i;
        let length = 0;
        if (val < 0) {
            let arr[0] = 45;
            let length = length + 1;
        }
        return -1; // TODO.
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
