// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array arr;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let length = 0;
        if (maxLength = 0) {
            return this;
        }
        let arr = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (arr = 0) { return; }
        do arr.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let arr[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) { return; }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int ret, i, digit;
        let ret = 0;

        if (length = 0) { return 0; }
        if (charAt(0) = 45) {
            let i = i + 1;
        }
        while (i < length) {
            let digit = charAt(i) - 48;
            if (digit < 0 | digit > 9) {
                return ret;
            }
            let ret = (10 * ret) + digit;
            let i = i + 1;
        }

        if (charAt(0) = 45) {
            let ret = -ret;
        }
        return ret;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int digit, div10;
        var int idx;

        let length = 0;
        if (val < -32767) {
            // Handle special case of -32768 which can't use the negation method below since +32768 can't be represented.
            do appendChar(45);
            do appendChar(51);
            do appendChar(50);
            do appendChar(55);
            do appendChar(54);
            do appendChar(56);
            return;
        }

        if (val = 0) {
            do appendChar(48);
            return;
        }

        if (val < 0) {
            do appendChar(45);
            let val = -val;
            let idx = 1;
        } else {
            let idx = 0;
        }
        if (val > 9) {
            let idx = idx + 1;
        }
        if (val > 99) {
            let idx = idx + 1;
        }
        if (val > 999) {
            let idx = idx + 1;
        }
        if (val > 9999) {
            let idx = idx + 1;
        }
        let length = idx + 1;


        while (val > 0) {
            let div10 = val / 10;
            let digit = val - (div10 * 10);
            do setCharAt(idx, digit + 48);
            let idx = idx - 1;
            let val = div10;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
