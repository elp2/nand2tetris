// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i, pow2;
        let n = 16;
        let powersOfTwo = Array.new(n);
        let i = 0;
        let pow2 = 1;
        while (i < n) {
            let powersOfTwo[i] = pow2;
            let i = i + 1;
            let pow2 = pow2 + pow2;
        }
        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum, xShifted, i;
        let sum = 0;
        let xShifted = x;
        let i = 0;
        while (i < n) {
            if ((y & powersOfTwo[i])) {
                let sum = sum + xShifted;
            }
            let xShifted = xShifted + xShifted;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int quotient;

        if ((y > x) | (y < 0)) {
            return 0;
        }

        let quotient = x / (y + y);

        if ((x - ((quotient + quotient) * y)) < y) {
            return (quotient + quotient) + 1;
        } else {
            return (quotient + quotient);
        }
        return 0;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        return 0;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }
}
