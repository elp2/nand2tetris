class Dino {
    field int x, y;
    field int floorY;

    field int velY;
    field boolean jumping;

    field int frame;

    constructor Dino new(int px, int py) {
        let x = px;
        let y = py;
        let floorY = py;
        let frame = 0;
        let velY = 0;
        let jumping = false;

        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void draw() {
        if (frame = 0) {
            do draw1();
            let frame = 1;
        } else {
            do draw2();
            let frame = 0;
        }
        return;
    }

    method void jump() {
        if (jumping) { return; }

        let jumping = true;
        let velY = -30;

        return;
    }

    method void tick() {
        if (~jumping) { return; }

        let velY = velY + 4;
        let y = y + velY;
        if (y > floorY) {
            let jumping = false;
            let y = floorY;
        }
        return;
    }

    function int dimension() {
        return 16;
    }

    method int screenLocation() {
        return 16384 + (x + (y * 32));
    }

    method boolean intersects(Cactus c) {
        var int cx, cu, cd;
        if (~(x = c.getX())) {
            return false;
        }
        // Intersects on x.

        let cu = c.getY();
        if (y + Dino.dimension() < cu) { return false; }
        let cd = c.getY() + Cactus.dimension();
        if (y > cu) { return false; }

        return true;
    }

    method void draw1() {
        var int memAddress;
        let memAddress = screenLocation();
        do Memory.poke(memAddress -1, 14336);
        do Memory.poke(memAddress +31, 10240);
        do Memory.poke(memAddress +63, -512);
        do Memory.poke(memAddress +95, -32256);
        do Memory.poke(memAddress +127, -32256);
        do Memory.poke(memAddress +159, -3583);
        do Memory.poke(memAddress +191, 4609);
        do Memory.poke(memAddress +223, 4615);
        do Memory.poke(memAddress +255, 13309);
        do Memory.poke(memAddress +287, 8193);
        do Memory.poke(memAddress +319, 8193);
        do Memory.poke(memAddress +351, 16382);
        do Memory.poke(memAddress +383, 1088);
        do Memory.poke(memAddress +415, 1088);
        do Memory.poke(memAddress +447, 2080);
        return;
    }

    method void draw2() {
        var int memAddress;
        let memAddress = screenLocation();
        do Memory.poke(memAddress -1, 14336);
        do Memory.poke(memAddress +31, 10240);
        do Memory.poke(memAddress +63, -512);
        do Memory.poke(memAddress +95, -3584);
        do Memory.poke(memAddress +127, 4608);
        do Memory.poke(memAddress +159, -3583);
        do Memory.poke(memAddress +191, -3577);
        do Memory.poke(memAddress +223, 4621);
        do Memory.poke(memAddress +255, 13309);
        do Memory.poke(memAddress +287, 8193);
        do Memory.poke(memAddress +319, 8194);
        do Memory.poke(memAddress +351, 16380);
        do Memory.poke(memAddress +383, 640);
        do Memory.poke(memAddress +415, 640);
        do Memory.poke(memAddress +447, 1088);
        return;
    }

}